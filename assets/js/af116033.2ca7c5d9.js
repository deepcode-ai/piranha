"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[364],{3905:(e,r,n)=>{n.d(r,{Zo:()=>u,kt:()=>m});var t=n(7294);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function l(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=t.createContext({}),c=function(e){var r=t.useContext(p),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},u=function(e){var r=c(e.components);return t.createElement(p.Provider,{value:r},e.children)},s="mdxType",f={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},d=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),s=c(n),d=a,m=s["".concat(p,".").concat(d)]||s[d]||f[d]||o;return n?t.createElement(m,i(i({ref:r},u),{},{components:n})):t.createElement(m,i({ref:r},u))}));function m(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var p in r)hasOwnProperty.call(r,p)&&(l[p]=r[p]);l.originalType=e,l[s]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3762:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>p,contentTitle:()=>i,default:()=>f,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var t=n(7462),a=(n(7294),n(3905));const o={id:"playground-overview",title:"Playground Overview",sidebar_label:"Overview"},i=void 0,l={unversionedId:"reference/playground/playground-overview",id:"reference/playground/playground-overview",title:"Playground Overview",description:"Piranha Playground is a user-friendly web interface for experimentation with refactoring and piranha rules. It minimizes the need for command-line or script-based operations, offering the following core functionalities:",source:"@site/docs/reference/playground/intro.md",sourceDirName:"reference/playground",slug:"/reference/playground/playground-overview",permalink:"/piranha/docs/reference/playground/playground-overview",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/reference/playground/intro.md",tags:[],version:"current",frontMatter:{id:"playground-overview",title:"Playground Overview",sidebar_label:"Overview"},sidebar:"docsSidebar",previous:{title:"Command Line Interface",permalink:"/piranha/docs/reference/cli"},next:{title:"Rule Inference",permalink:"/piranha/docs/reference/playground/inference"}},p={},c=[],u={toc:c},s="wrapper";function f(e){let{components:r,...n}=e;return(0,a.kt)(s,(0,t.Z)({},u,n,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Piranha Playground is a user-friendly web interface for experimentation with refactoring and piranha rules. It minimizes the need for command-line or script-based operations, offering the following core functionalities:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("a",{parentName:"p",href:"inference"},(0,a.kt)("strong",{parentName:"a"},"Rule Inference")),": Infer piranha rule graphs from before and after code examples and templates.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("a",{parentName:"p",href:"improvement"},(0,a.kt)("strong",{parentName:"a"},"Rule Improvement")),": Improve initially inferred piranha rules using OpenAI models.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Rule Testing:")," Test rules on a specific code snippet before applying them to the entire codebase.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Codebase Refactoring:")," Refactor your codebase with specific rules."))),(0,a.kt)("p",null,"For more detailed information on each functionality, please refer to the respective sections."))}f.isMDXComponent=!0}}]);