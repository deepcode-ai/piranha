"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[462],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>f});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),p=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(r),d=n,f=c["".concat(l,".").concat(d)]||c[d]||g[d]||i;return r?a.createElement(f,o(o({ref:t},u),{},{components:r})):a.createElement(f,o({ref:t},u))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:n,o[1]=s;for(var p=2;p<i;p++)o[p]=r[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},8612:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=r(7462),n=(r(7294),r(3905));const i={id:"vis",title:"Visualizing rules",sidebar_label:"Visualizing rules"},o=void 0,s={unversionedId:"reference/vis",id:"reference/vis",title:"Visualizing rules",description:"Visualizing rules, groups and their edges through a graph is a great way to understand how Piranha Polyglot works.",source:"@site/docs/reference/vis.md",sourceDirName:"reference",slug:"/reference/vis",permalink:"/piranha/docs/reference/vis",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/reference/vis.md",tags:[],version:"current",frontMatter:{id:"vis",title:"Visualizing rules",sidebar_label:"Visualizing rules"},sidebar:"docsSidebar",previous:{title:"Refactoring",permalink:"/piranha/docs/reference/playground/refactor"},next:{title:"Languages supported",permalink:"/piranha/docs/reference/languages"}},l={},p=[],u={toc:p},c="wrapper";function g(e){let{components:t,...r}=e;return(0,n.kt)(c,(0,a.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Visualizing rules, groups and their edges through a graph is a great way to understand how Piranha Polyglot works."),(0,n.kt)("p",null,"We use ",(0,n.kt)("a",{parentName:"p",href:"https://graphviz.org/"},"Graphviz")," to generate a .dot file and a .svg image generated by ",(0,n.kt)("inlineCode",{parentName:"p"},"visualize_rules_graph.py"),".\nPlease follow the instructions to install Graphviz at ",(0,n.kt)("a",{parentName:"p",href:"https://graphviz.org/download/"},"https://graphviz.org/download/"),".\nMoreover, the script also needs the ",(0,n.kt)("inlineCode",{parentName:"p"},"toml")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"graphviz")," python packages."),(0,n.kt)("p",null,"The script takes as first argument a path for the generated .dot file.\nThe following arguments are paths for directories containing ",(0,n.kt)("inlineCode",{parentName:"p"},"rules.toml")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"edges.toml")," files.\nOptionally, you can provide a ",(0,n.kt)("inlineCode",{parentName:"p"},"--title")," argument to give a title to the generated graph.\nTo generate the .dot file and the .svg image used in this README (assuming a Python venv and a valid Graphviz installation):"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'pip install toml\npip install graphviz\npython visualize_rules_graph.py ./java_prebuilt_rules.dot src/cleanup_rules/java --title "Java pre-built cleanup rules"\n')),(0,n.kt)("p",null,"To generate an image for ",(0,n.kt)("a",{parentName:"p",href:"test-resources/java/feature_flag_system_1/control/configurations/"},"java-ff_system1")," in our tests:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'python visualize_rules_graph.py ./java-ff_system1.dot src/cleanup_rules/java test-resources/java/feature_flag_system_1/control/configurations --title "Java Test Feature Flag Cleanup System 1"\n')))}g.isMDXComponent=!0}}]);