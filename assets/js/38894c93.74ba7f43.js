"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[567],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>g});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(r),f=a,g=u["".concat(l,".").concat(f)]||u[f]||d[f]||s;return r?n.createElement(g,i(i({ref:t},p),{},{components:r})):n.createElement(g,i({ref:t},p))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=r.length,i=new Array(s);i[0]=f;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:a,i[1]=o;for(var c=2;c<s;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},3053:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const s={id:"rules",label:"Rule Languages",title:"Rule Languages"},i=void 0,o={unversionedId:"reference/dsl/rules",id:"reference/dsl/rules",title:"Rule Languages",description:"Piranha offers support for three distinct rule languages for matching code.",source:"@site/docs/reference/dsl/rules.md",sourceDirName:"reference/dsl",slug:"/reference/dsl/rules",permalink:"/piranha/docs/reference/dsl/rules",draft:!1,editUrl:"https://github.com/uber/piranha/tree/website/site/docs/reference/dsl/rules.md",tags:[],version:"current",frontMatter:{id:"rules",label:"Rule Languages",title:"Rule Languages"},sidebar:"docsSidebar",previous:{title:"Graph Language",permalink:"/piranha/docs/reference/dsl/graphs"},next:{title:"Python API",permalink:"/piranha/docs/reference/api"}},l={},c=[],p={toc:c},u="wrapper";function d(e){let{components:t,...s}=e;return(0,a.kt)(u,(0,n.Z)({},p,s,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Piranha offers support for three distinct rule languages for matching code."),(0,a.kt)("h1",{id:"tree-sitter-queries"},"Tree-sitter Queries"),(0,a.kt)("p",null,"The Tree-sitter queries language is one of the rule languages that Piranha supports. For a detailed understanding of the syntax, refer to the ",(0,a.kt)("a",{parentName:"p",href:"https://tree-sitter.github.io/tree-sitter/syntax-highlighting#queries"},"Tree-sitter Syntax Reference"),"."),(0,a.kt)("h1",{id:"regular-expressions-regex"},"Regular Expressions (Regex)"),(0,a.kt)("p",null,"Regex forms another rule language supported by Piranha. To create a rule in regex, prepend your query with ",(0,a.kt)("inlineCode",{parentName:"p"},"rgx "),". For instance: ",(0,a.kt)("inlineCode",{parentName:"p"},"rgx <your regex query>"),". Piranha supports the regex syntax derived from the ",(0,a.kt)("a",{parentName:"p",href:"https://docs.rs/regex/"},"regex")," crate."),(0,a.kt)("h1",{id:"concrete-syntax"},"Concrete Syntax"),(0,a.kt)("p",null,"Piranha's Concrete Syntax is a custom rule language designed for matching and replacing code. Concrete Syntax operates at the parse tree level, similar to ",(0,a.kt)("a",{parentName:"p",href:"https://comby.dev/"},"comby"),", yet with a distinct difference: it will only match a node if it is possible to traverse the corresponding its parse tree from start to finish using the concrete syntax template."),(0,a.kt)("p",null,"Template variables ",(0,a.kt)("inlineCode",{parentName:"p"},":[x], :[y], ...")," are used as placeholders to match arbitrary nodes (i.e., syntactically meaningful constructs)."),(0,a.kt)("p",null,"Consider the following code snippet:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'exp.isTreated("SHOW_MENU")\n')),(0,a.kt)("p",null,"To match this code snippet, we can use the concrete syntax (cs) template:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"cs :[object].isTreated(:[string])\n")),(0,a.kt)("p",null,"which matches the method invocation nodes as follows: "),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"example.png",src:r(2827).Z,width:"3296",height:"1250"})))}d.isMDXComponent=!0},2827:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/example-c5d7e48747b15d7767e2bff93d708be8.png"}}]);